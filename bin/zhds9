#!/bin/sh

# Setup
TMP=/tmp

# make sure we have minimum arg count
if [ $# -lt 5 ]; then
    echo "zhtools [xpa] [filename] [save] [disp] [cmd] [cmd-specific-args]"
    exit 1
fi

# we use standard argument lists, so disable the user's readpar file
if [ "x$MY_READPAR_FILE" != x ]; then
  unset MY_READPAR_FILE
fi

# process standard arguments
XPA=$1;       shift;
IFILENAME=$1; shift;
OFILE=$1;     shift;
DISP=$1;      shift;
CMD=$1;       shift;

# init variables
IFILE="-"
TMPFILE=$TMP/zhtools_$$.tmp1
TMPFILE2=$TMP/zhtools_$$.tmp2

# top-leve install directory
ZHTOP=/soft/zhtools
# but use ZHTOOLS environment variable if it exists
if [ "x$ZHTOOLS" != x ]; then
  ZHTOP=$ZHTOOLS
fi

# derived bin and help directories
ZHBIN=${ZHTOP}/bin
ZHHLP=${ZHTOP}/zhhelp

# make sure ZHTOOLS are available
if [ ! -x ${ZHBIN}/zhhelp ]; then
    echo "ERROR: cannot locate ZHTOOLS -- please remedy and try again"
    exit 1
fi

# process output file directive (might not want to save it)
if [ $OFILE = "none" ]; then
    OFILE="$TMP/zh_${CMD}_$$.fits"
    #  name of the file with no path and no filter extension  
    OROOT=`echo $IFILENAME | awk -F/ '{print $NF}' | awk -F[ '{print $1}'`
    OFILENAME="${OROOT}_${CMD}"
    SAVE="0"
else
    OFILENAME="$OFILE"
    SAVE="1"
fi

# process commands
case $CMD in
zhhelp)
    if [ x"$1" != x ]; then
        cat ${ZHHLP}/$1.help
    else
        ${ZHBIN}/zhhelp
    fi
    exit 0
    ;;

adapt)
    if [ $# != 2 ]; then
      echo "ERROR: adapt [ncnt] [rmax]"
      exit 1
    fi
    ARGS="ncnt=$1"
    if [ "$2" != "0" ]; then
      ARGS="$ARGS rmax=$2"
    fi
    echo "Running: " ${ZHBIN}/adapt $IFILE out=$OFILE $ARGS
    ${ZHBIN}/adapt $IFILE out=$OFILE $ARGS 2>&1
    if [ $DISP = "1" ]; then 
      echo "Now sending image to:" $XPA
      xpaset -p $XPA frame new
      xpaset $XPA fits "$OFILENAME" < $OFILE
      echo "Image display complete"
    fi
    if [  $SAVE = "1" ]; then
        echo "Saved smoothed FITS file: $OFILE"
    else
        rm -f $OFILE
    fi
    echo "Top-hat Filter Adaptive Smooth Complete"
    exit 0
    ;;

atrous)
    if [ $# != 4 ]; then
      echo "ERROR: atrous [scale] [bkgd] [exp] [smooth]"
      exit 1
    fi
    ARGS="scale=$1"
    if [ "$2" != "none" ]; then
      ARGS="$ARGS bkgd=$2"
    fi
    if [ "$3" != "none" ]; then
      ARGS="$ARGS exp=$3"
    fi
    if [ "$4" = "1" ]; then
       ARGS="$ARGS smooth=yes"
    fi
    echo "Running: " ${ZHBIN}/atrous $IFILE out="$OFILE" $ARGS
    ${ZHBIN}/atrous $IFILE out="$OFILE" $ARGS 2>&1
    if [ $DISP = "1" ]; then 
      echo "Now sending image to:" $XPA
      xpaset -p $XPA frame new
      xpaset $XPA fits "$OFILENAME" < $OFILE
      echo "Image display complete"
    fi
    if [  $SAVE = "1" ]; then
        echo "Saved convolved FITS file: $OFILE"
    else
        rm -f $OFILE
    fi
    echo "Atrous Wavelet Convolution Complete"
    exit 0
    ;;

imexam)
    if [ $# != 13 ]; then
      echo "ERROR: prbyreg imexam [sum] [mean] [errmean] [dispersion] [stddev] [absdev] [square] [sumsquare] [min] [max] [meancoords] [median]"
      exit 1
    fi
    if [ $1 = "1" ]; then
      PRBYREG="yes"
    else
      PRBYREG="no"
    fi
    shift
    MODE="sum mean errmean dispersion stddev absdev square sumsquare min max meancoords median"
    mode=""
    for i in $MODE
    do
      if [ $1 = "1" ]; then 
        if [ x"$mode" = x ]; then
          mode=$i
        else
          mode="$mode,$i"
        fi
      fi
      shift
    done
    TMPREG=$TMP/ds9$$.reg
    xpaget $XPA regions -coord image | awk '{print $0}' > $TMPREG
    if [ ! -s $TMPREG ]; then
        echo "Error: no region specified. Please select one or more regions and try again."
        rm -f $TMPREG
        exit 1
    fi
    echo "Running: " ${ZHBIN}/imexam $IFILE $mode reg=$TMPREG printbyreg=$PRBYREG
    echo "Imexam mode is:" $mode
    echo "using region(s):"
    cat $TMPREG
    ${ZHBIN}/imexam $IFILE "$mode" reg=$TMPREG printbyreg=$PRBYREG 2>&1
    rm -f $TMPREG
    exit 0
    ;;

imsmo)
    if [ $# != 2 ]; then
      echo "ERROR: imsmo [sigma] [exact]"
      exit 1
    fi
    ARGS="-sigma $1"
    if [ "$2" = "1" ]; then
      ARGS="$ARGS -exact"
    fi
    echo "Running: " ${ZHBIN}/imsmo -o $OFILE $ARGS $IFILE
    ${ZHBIN}/imsmo -o $OFILE $ARGS $IFILE 2>&1
    if [ $DISP = "1" ]; then 
      echo "Now sending image to:" $XPA
      xpaset -p $XPA frame new
      xpaset $XPA fits "$OFILENAME" < $OFILE
      echo "Image display complete"
    fi
    if [  $SAVE = "1" ]; then
        echo "Saved smoothed FITS file: $OFILE"
    else
        rm -f $OFILE
    fi
    echo "Imsmo Complete"
    exit 0
    ;;

mexhat)
    if [ $# != 5 ]; then
      echo "ERROR: mexhat [scale] [bkgd] [exp] [edge] [snr]"
      exit 1
    fi
    SCALE=$1
    ARGS=""
    if [ "$2" != "none" ]; then
      ARGS="$ARGS bkgd=$4"
    fi
    if [ "$3" != "none" ]; then
      ARGS="$ARGS exp=$5"
    fi
    if [ "$4" != "none" ]; then
       ARGS="$ARGS edge=$6"
    fi
    if [ "$5" = "1" ]; then
       ARGS="$ARGS snr=yes"
    fi
    echo "Running: " ${ZHBIN}/mexhat $SCALE $IFILE out=$OFILE $ARGS
    ${ZHBIN}/mexhat $SCALE $IFILE out=$OFILE $ARGS 2>&1
    if [ $DISP = "1" ]; then 
      echo "Now sending image to:" $XPA
      xpaset -p $XPA frame new
      xpaset $XPA fits "$OFILENAME" < $OFILE
      echo "Image display complete"
    fi
    if [  $SAVE = "1" ]; then
        echo "Saved smoothed FITS file: $OFILE"
    else
        rm -f $OFILE
    fi
    echo "Mexhat Complete"
    exit 0
    ;;

wvdecomp)
    if [ $# != 5 ]; then
      echo "ERROR: wvdecomp [scmin] [scmax] [thresh] [fthresh] [niter]"
      exit 1
    fi
    echo "Running: " ${ZHBIN}/wvdecomp $IFILE $OFILE scalemin=$1 scalemax=$2 threshold=$3 thresholdmin=$4 iter=$5
    ${ZHBIN}/wvdecomp $IFILE $OFILE scalemin=$1 scalemax=$2 threshold=$3 thresholdmin=$4 iter=$5 2>&1
    if [ $DISP = "1" ]; then 
      echo "Now sending image to:" $XPA
      xpaset -p $XPA frame new
      xpaset $XPA fits "$OFILENAME" < $OFILE
      echo "Image display complete"
    fi
    if [  $SAVE = "1" ]; then
        echo "Final wavelet-smoothed output in file: $OFILE"
        echo "Results for each scale are in file:    $OFILE.<scale>"
        echo "Residuals are in file:                 $OFILE.7"
    fi
    echo "Wavelet Decomposition Complete"
    exit 0
    ;;

refinepos)
    if [ $# != 3 ]; then
      echo "ERROR: refinepos [regions] [niter] [rsrc]"
      exit 1
    fi
    perl -e '{$ARGV[0]=~s/image;//g; @regs = split(";",$ARGV[0]); foreach $reg ( @regs ) { $_ = $reg; s/[\(\),]/ /g; ($type,$x,$y,$r)=split;  if (!($type=~/^circle/)){$r=""};  if(!($type=~/^polygon/i ||$type=~/^pie/i)) { print $x," ",$y," ",$r,"\n";} }}' "$1" > $TMPFILE
    if [ ! -s $TMPFILE ]; then
        echo "ERROR: Refinepos requires at least one (circular) region"
	exit 1
    fi
    echo "Running: ${ZHBIN}/refinepos img=$IFILE iter=$2 rsrc=$3"
    echo "initial region(s): $1"
    ${ZHBIN}/refinepos img=$IFILE iter=$2 rsrc=$3 i=$TMPFILE | awk '{printf "image;circle(%s,%s,%s)\n", $1, $2, $3}'  2>&1 > $OFILE
    echo "final region(s):  " `cat $OFILE`
    if [ $DISP = "1" ]; then 
        xpaset -p $XPA regions deleteall
        xpaset $XPA regions < $OFILE
    fi
    if [  $SAVE = "1" ]; then
        echo "Saved refined regions file: $OFILE"
    else
        rm -f $OFILE
    fi
    echo "Refinepos Complete"
    rm -f $TMPFILE
    exit 0
    ;;

*)
    echo "ERROR: unknown zhtools function: " $CMD
    exit 1
    ;;

esac
